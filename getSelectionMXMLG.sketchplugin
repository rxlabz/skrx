// Selection to MXMLG (ctrl alt cmd f)

/*
* allow you export MXML skin for Apache Flex spark Button
* DONE :
* - rect, alpha, radius, fill0, border0
* - clipboard
* - localPosAlert

* » localPos

* TODO :
* - gradients
* - multistates
* - lines, path, ellipse
* - img ( icons )
* - multi-resolution
* 
*/
log("Plugin getSelectionMXMLG started...");

// var test = selection.firstObject().style().fills().firstObject().color().hexValue();


var useLocalPos;

/***************
* OBJECTS
*************** */

/*
* gestionnaire de tabulation
*/
var T = {
	value:0,
	add:function(){ this.value ++ ;},
	rm:function(){ this.value --  ;},
	tab:function(){
			var t = "";
			for(var i = 0 ; i < this.value ; i++){
				t += "\t";
			}
			return t; },
}

var ND = " >\n";
var _ND = " >\n";

/*
* gestionnaire de clipboard
*/
var clipboard = {
	board: NSPasteboard.generalPasteboard(),

	copy:function( value )
	{
		this.board.declareTypes_owner( [ NSPasteboardTypeString ], null );
		this.board.setString_forType( value , NSPasteboardTypeString );	
	}
}

/**
* gestionnaire d'alerte
*/
var Al = {
	show:function( bt1Label, bt2Label, title, info ){
		var alert = [[NSAlert alloc] init];
		[alert addButtonWithTitle:bt1Label];
		[alert addButtonWithTitle:bt2Label];
		[alert setMessageText:title];
		[alert setInformativeText:info];
		[alert setAlertStyle:NSWarningAlertStyle];		

		var choice = [alert runModal];
		[alert release];
		return choice == NSAlertFirstButtonReturn ? 1 : 2;
	}
};


/***************
* FUNCTIONS
*************** */

/*
* returns MXML description of a layer / shape / Rectangle
*/
function getMXML(layer, localPos)
{
	log( "getMXML" );

	// rect coord
	var item = [layer frame];
	var rect = getItemRect(item, localPos);

	// <
	var itML = "<s:Rect ";
	itML += "width=\"" + rect.width + "\" " + "height=\"" + rect.height + "\" " + "x=\"" + rect.x + "\" " + "y=\"" + rect.y + "\" ";
	
	// styles
	var itemStyle = [layer style];
	itML += getOpacityAttribute(itemStyle);
	itML += getRadiusAttribute(layer);

	// Rect>
	itML += ND;
	T.add();

	// stroke
	var itemBorders = [itemStyle borders];	
	itML += getStrokeNode( itemBorders[0]);

	// fill
	var itemFills = [itemStyle fills];
	itML += getFillNode( itemFills[0]);
	T.rm();

	// </
	itML += "</s:Rect>";

	return itML;
}

/*
* item rect coordinates
*/
function getItemRect( item , localPos)
{
	var rect = {};
	rect.width = [item width];
	rect.height = [item height];

	rect.x = localPos ? 0 : [item x];
	rect.y = localPos ? 0 : [item y];
	return rect;
}

/*
* return style opacity
*/
function getOpacityAttribute( style )
{
	log("getOpacityAttribute()..." );
	
	var gfxContext = [style contextSettings];
	var o = [gfxContext opacity];
	log("Opacity : " + o );
	
	return " alpha=\"" + o + "\" ";
}

function getRadiusAttribute(layer)
{
	log("getRadiusAttribute()...");
	var radius = [[[layer layers] firstObject] fixedRadius];
	var rd = " radiusX=\"" + radius + "\" ";
	rd += " radiusY=\"" + radius + "\" ";
	log("radius : " + radius );
	
	return rd;
}

function getAlphaAttribute(color){
	log("getAlphaAttribute()...");
	var colorAlpha = [color alpha];
	log('alpha : ' + colorAlpha );
	a = " alpha=\""+ colorAlpha +"\" ";

	return a;
}


function getStrokeNode(border){
	log("getStrokeNode...");
	var strokeChain = T.tab() + "<s:stroke>\n";
	var borderType = [border fillType];

	if( borderType == 0 ){
		var borderColor = [border color];
		var hexColor = [borderColor hexValue];
		log('hexValue : ' + hexColor);

		T.add();
		strokeChain += T.tab() + "<s:SolidColorStroke color=\"#" + hexColor + "\" ";
		strokeChain += getAlphaAttribute(borderColor);		

		strokeChain += _ND;
		T.rm();
		strokeChain += T.tab() + "</s:stroke>\n";
	}

	return strokeChain;
}


function getFillNode(fill)
{
	log("getFillNode...");

	var fillChain = T.tab() + "<s:fill>\n";
	var fillType = [fill fillType];

	if( fillType == 0 ) // solid color
	{
		var fillColor = [fill color];
		var hexColor = [fillColor hexValue];
		log('hexValue : ' + hexColor);

		T.add();
		fillChain += T.tab() + "<s:SolidColor color=\"#" + hexColor + "\" ";
		fillChain += getAlphaAttribute(fillColor);

		fillChain += _ND;
		T.rm();
		fillChain += T.tab() + "</s:fill>\n";
	} else if( fillType == 1 ) // gradient
	{

	}

	return fillChain;
}

var localPos;
/*
* EXPORT LES ITEMS DE LA SELECTION
*/
var alertInfo = "Coordonnées locales : origine x,y = coin haut gauche de la selection";
var alertTitle = "Voulez-vous utiliser les coordonnées locales de la sélection ?";
for (var i=0; i<selection.length(); i++) {
	localPos = Al.show( "Oui", "Non", alertTitle, alertInfo);

	log("localPos : " + localPos);

	var layer = selection[i];

	var res = getMXML(layer, localPos);

	clipboard.copy( res );

	log("*** MXML complete ! ***");
	log(res);

}