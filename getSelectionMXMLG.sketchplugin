// Selection to MXMLG (ctrl alt cmd f)

/*
* v0.1.3
*
* copy a MXML description of selected elements to clipboard( Apache Flex , Spark Skins )
*
*/

log("Plugin getSelectionMXMLG started...");

/***************
* OBJECTS
*************** */

/*
* \tab manager
*/
var T = {
	value:0,
	add:function(){ this.value ++ ;},
	rm:function(){ this.value --  ;},
	tab:function(){
		var t = "";
		for(var i = 0 ; i < this.value ; i++){
			t += "\t";
		}
		return t;
	}
};		

/*
* clipboard manager
*/
var clipboard = {
	board: NSPasteboard.generalPasteboard(),

	copy:function( value )
	{
		this.board.declareTypes_owner( [ NSPasteboardTypeString ], null );
		this.board.setString_forType( value , NSPasteboardTypeString );	
	}
};

/**
* Alert manager
*/
var Al = {
	show:function( firstButtonLabel, secondButtonLabel, title, info ){
		var alert = [[NSAlert alloc] init];
		[alert addButtonWithTitle:firstButtonLabel];

		if( secondButtonLabel != null )
			[alert addButtonWithTitle:secondButtonLabel];

		if( title != null)
			[alert setMessageText:title];

		if( info != null)
			[alert setInformativeText:info];

		if( ! secondButtonLabel )
			[alert setAlertStyle:NSInformationalAlertStyle];		
		else
			[alert setAlertStyle:NSWarningAlertStyle];		

		var choice = [alert runModal];
		[alert release];
		return choice == NSAlertFirstButtonReturn ? 1 : 2;
	}
};


/***************
* FUNCTIONS
*************** */

const PIXEL_HINTING = " pixelHinting=\"true\" " ;

/**
* returns local origin coordinates : topLeft point coordinate for the selection area
*/
function getSelectionOriginRect(){

	var area = getSelectionArea();

	var origin = {
		x:area.left,
		y:area.top
	};

	return origin;
}

/**
* returns top left right bottom area + width height of selection
*/
function getSelectionArea(){
	var layer;

	var area = {left:0, right:0,top:0,bottom:0};

	var numItems = [selection length];
	log( "numItems : " + numItems);

	// get min position : top-left and max : bottom-right
	for( var i = 0 ; i < numItems ; i ++){
		layer = selection[i];
		frame = [layer frame];

		area.left = (area.left == 0) ? frame.x() : Math.min(frame.x() , area.left);
		area.top = (area.top == 0) ? frame.y() : Math.min(frame.y() , area.top);
		area.right = Math.max(frame.x() + frame.width() , area.right);
		area.bottom = Math.max( frame.y() + frame.height() , area.bottom  );

		area.width = area.right - area.left;
		area.height = area.bottom - area.top;
	}

	return area;
}

/*
* returns MXML description of a layer / shape / Rectangle
*/
function getMXML(layer, setLocalPosition, localCenter){
	log( "getMXML()..." );

	// rect coord
	var item = [layer frame];
	var rect = getItemRect(item, setLocalPosition, localCenter);

	// <
	var itML = "<s:Rect ";
	itML += "width=\"" + rect.width + "\" " + "height=\"" + rect.height + "\" " + "x=\"" + rect.x + "\" " + "y=\"" + rect.y + "\" ";
	
	// styles
	var itemStyle = [layer style];
	itML += getOpacityAttribute(itemStyle);
	itML += getRadiusAttribute(layer);

	// Rect>
	itML += ND;
	T.add();

	// stroke
	var itemBorders = [itemStyle borders];	
	itML += getStrokeNode( itemBorders[0]);

	// fill
	var itemFills = [itemStyle fills];
	itML += getFillNode( itemFills[0]);
	
	// shadows 
	itML += getFilters( layer.style() );

	T.rm();

	// </
	itML += "</s:Rect>\n\n";

	return itML;
}

/*
* item rect coordinates
*/
function getItemRect( item , setLocalPosition, localCenter){
	var rect = {};
	rect.width = [item width];
	rect.height = [item height];

	var itemX = [item x];
	var itemY = [item y];
	rect.x = setLocalPosition ? itemX - localCenter.x : itemX;
	rect.y = setLocalPosition ? itemY - localCenter.y : itemY;
	return rect;
}

/*
* return style opacity
*/
function getOpacityAttribute( style ){
	log("getOpacityAttribute()..." );
	
	var gfxContext = [style contextSettings];
	var o = [gfxContext opacity];
	log("Opacity : " + o );
	
	return " alpha=\"" + o + "\" ";
}

function getRadiusAttribute(layer){
	log("getRadiusAttribute()...");
	var radius = [[[layer layers] firstObject] fixedRadius];
	var rd = " radiusX=\"" + radius + "\" ";
	rd += " radiusY=\"" + radius + "\" ";
	log("radius : " + radius );
	
	return rd;
}

function getAlphaAttribute(color){
	log("getAlphaAttribute()...");
	var colorAlpha = [color alpha];
	log('alpha : ' + colorAlpha );
	a = " alpha=\""+ colorAlpha +"\" ";

	return a;
}

function getStrokeNode(border){
	log("getStrokeNode...");
	var strokeChain = T.tab() + "<s:stroke>\n";
	var borderType = [border fillType];
	var thickness = [border thickness];
	var weight = " weight=\""+ thickness +"\" " ;

	T.add();

	if( borderType == 0 ){
		var borderColor = [border color];	
		strokeChain += getSolidColorNode(borderColor, true, weight);		
	} else if( borderType == 1 ){ // gradient
		var gradient = [border gradient];
		strokeChain += getGradientNode(gradient, true, weight);		
	} else 
		log("!!! ERROR !!!")

	T.rm();

	strokeChain += T.tab() + "</s:stroke>\n";

	return strokeChain;
}


function getFillNode(fill){
	log("getFillNode...");

	var fillChain = T.tab() + "<s:fill>\n";
	var fillType = [fill fillType];

	T.add();

	if( fillType == 0 ){ // solid color
		var fillColor = [fill color];
		fillChain += getSolidColorNode(fillColor, false, "");
	} else if( fillType == 1 ){ // gradient
		var gradient = [fill gradient];
		fillChain += getGradientNode(gradient, false, "");		
	} else 
		log("!!! ERROR !!!");

	T.rm();
	
	fillChain += T.tab() + "</s:fill>\n";	

	return fillChain;
}

function getSolidColorNode( color, isStroke, weight ){
	var c = "";

	var strokeSufx = isStroke ? 'Stroke' : "";
	
	var pxHint = isStroke ? PIXEL_HINTING : "";
	var hexColor = [color hexValue];
	log('hexValue : ' + hexColor);

	c += T.tab() + "<s:SolidColor"+strokeSufx+" color=\"#" + hexColor + "\" ";
	c += getAlphaAttribute(color);
	c += pxHint;
	c += weight;
	c += _ND;

	return c;
}

/**
* export MXML Gradient
* @param gradient MSGradient
* @param isStroke Bool
* exemple :
*	<s:[isRadial?Radial:Linear]Gradient[isStroke?Stroke:] rotation="90" >
*		<s:GradientEntry color="#AAAAAA" ratio="0" alpha="1"  />
*		<s:GradientEntry color="#FF0000" ratio="1" alpha=".5"  />
*	</s:LinearGradient[isStroke? "Stroke"]>
*/
function getGradientNode(gradient, isStroke, weight ){
	log("getGradientNode()...");
	
	
	var gradientType = [gradient gradientType];
	var isRadial = (gradientType == 1 );	

	var strokeSufx = isStroke ? 'Stroke' : "";
	var gradientType = isRadial ? 'Radial' : "Linear";

	var pxHint = isStroke ? PIXEL_HINTING : "";

	var g = T.tab() + "<s:"+ gradientType +"Gradient"+strokeSufx ;
	g += getGradientAngle(gradient) ;
	g += pxHint;
	g += weight;
	g += ND;

	g += getGradientEntriesNodes(gradient);
	
	g += T.tab() + "</s:"+ gradientType +"Gradient"+strokeSufx+">\n";

	log(g);
	return g;
}

function getGradientAngle(gradient){
	var a = "";
	var p1 = gradient.from();
	var p2 = gradient.to();
	var angle = Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
	a += " rotation=\""+ angle +"\" "

	return a;
}

function getGradientEntriesNodes(gradient){
	log("getGradientEntriesNodes()...");
	var entries = '';
	var gradientEntries = [gradient stops];
	var numEntries = gradientEntries.length();
	log("numEntries : " + numEntries);

	T.add();
	for( var i = 0 ; i < numEntries ; i++)
	{
		entry = gradientEntries[i];
		var entryColor = [[entry color] hexValue];
		log("entry hex : " + entryColor);
		entries += T.tab() +  "<s:GradientEntry color=\"#" + entryColor + "\" ";

		var entryPos = [entry position];
		log("entry pos : " + entryPos);
		entries += "ratio=\"" + entryPos+ "\" ";

		var entryAlpha = [[entry color] alpha];
		log("entry alpha : " + entryAlpha);
		entries += "alpha=\"" + entryAlpha + "\" />\n";
	}
	T.rm();
	log(entries);

	return entries;
}

function getFilters( style )
{
	log("getFilters()...")

	var f = T.tab() + "<s:filters>\n";

	// shadows
	var shadowString = getShadowBytype(style, true);
	f += shadowString;

	// innerShadows
	var innerShadowString = getShadowBytype(style, false);
	f += innerShadowString;

	f += T.tab() + "</s:filters>\n";

	return ( shadowString!= "" || innerShadowString != "") ? f : '';
}

function getShadowBytype( style , inner){
	log("getShadowBytype()...");

	var shadows = inner ? style.innerShadows() : style.shadows();
	var shadow = shadows[0];
	var s = "";

	if( shadow )
		s += getShadow(shadow, inner);
	
	return s;
}


/*
<s:filters>
	<s:DropShadowFilter blurY="2" blurX="2" color="#000000" alpha="0.5" strength="1" />
</s:filters>
*/
function getShadow( shadow , inner)
{
	T.add();
	var s = T.tab() + "<s:DropShadowFilter ";

	s += inner ? "inner=\"true\" " : "";
	s +=  "blurX=\"" + shadow.blurRadius() + "\" ";
	s +=  "blurY=\"" + shadow.blurRadius() + "\" ";

	var distance = 0;
	s +=  "distance=\"" + distance + "\" ";
	s +=  "color=\"#" + shadow.color().hexValue() + "\" ";
	s +=  "alpha=\"" + shadow.color().alpha() + "\" ";
	s +=  "strength=\"" + (shadow.spread() + 1) + "\" ";

	// ANGLE » s +=  "distance=\"" + getShadowDistance + "\" ";
	// ANGLE » s +=  "angle=\"" + getShadowAngle + "\" ";

	s += _ND;
	T.rm();

	return s;
}


function exportSelection(){
	var res = "";
	var layer ;

	for (var i=0; i<selection.length(); i++) {
		log("setLocalPosition : " + setLocalPosition);
		layer = selection[i];
		res += getMXML(layer, setLocalPosition, localCenter);
	}

	// EXPORT TO CLIPBOARD & LOG
	clipboard.copy( res );
	log("*** Export complete ! ***");
	log(res);	

	Al.show('OK', null, "Export MXML", "Completed");
}

/***************
* CONST
*************** */
const ND = " >\n";
const _ND = " />\n";

const LOCAL_POS_TITLE = "Do you want to use the local coordinates of the selection?";
const LOCAL_POS_INFO = "In Local coordinates, elements positions are calculated from the topleft corner of the selection.";

/* ********************************
* RUN
/* ******************************* */ 

// Alert : local coordinates ?
var setLocalPosition = Al.show( "Yes", "No", LOCAL_POS_TITLE, LOCAL_POS_INFO);
var localCenter = {x:0,y:0};

if( setLocalPosition )
	localCenter = getSelectionOriginRect();

// EXPORT
exportSelection();

/*
* TODO :
* - multiples shadows and innerShadows
* - flex multistates
* - lines, path, ellipse
* - shadows distance +? angle
* - multi-resolution export ( fxg mobiles skins )
* - radial gradient x, y, foalCenterPoint
* - labelDisplay properties : color, fontSize
* - img ( icons )
* - refactor to tim templating
* - 0.2 » global refactor : skrx
* - skin file generation
* - component templates
* - ...
*/

