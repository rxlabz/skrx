// Selection to MXMLG (ctrl alt cmd f)

/*
* allow you export MXML skin for Apache Flex spark Button
* DONE :
* rect, alpha, radius, fill0, border0
* 
* TODO :
* - 
* 
*/
log("Plugin getSelectionMXMLG started...");

// var test = selection.firstObject().style().fills().firstObject().color().hexValue();

/***************
* OBJECTS
*************** */

// gestionnaire de tabulation
var T = {
	value:0,
	add:function(){ this.value ++ ;},
	rm:function(){ this.value --  ;},
	tab:function(){
			var t = "";
			for(var i = 0 ; i < this.value ; i++){
				t += "\t";
			}
			return t; },
}

var clipboard = {
	board: NSPasteboard.generalPasteboard(),

	copy:function( value )
	{
		this.board.declareTypes_owner( [ NSPasteboardTypeString ], null );
		this.board.setString_forType( value , NSPasteboardTypeString );	
	}
}

/***************
* FUNCTIONS
*************** */

function getMXML(layer)
{
	log( "getMXML" );

	// rect coord
	var item = [layer frame];
	var rect = getItemRect(item);

	// <
	var itML = "<s:Rect ";
	itML += "width=\"" + rect.width + "\" " + "height=\"" + rect.height + "\" " + "x=\"" + rect.x + "\" " + "y=\"" + rect.y + "\" ";
	
	// styles
	var itemStyle = [layer style];
	itML += getOpacityAttribute(itemStyle);
	itML += getRadiusAttribute(layer);

	// Rect>
	itML += " >\n";
	T.add();

	// stroke
	var itemBorders = [itemStyle borders];	
	itML += getStrokeNode( itemBorders[0]);

	// fill
	var itemFills = [itemStyle fills];
	itML += getFillNode( itemFills[0]);
	T.rm();

	// </
	itML += "</s:Rect>";

	return itML;
}

function getItemRect( item )
{
	var rect = {};
	rect.width = [item width];
	rect.height = [item height];

	rect.x = [item x];
	rect.y = [item y];
	return rect;
}

function getOpacityAttribute( style )
{
	log("getOpacityAttribute()..." );
	
	var gfxContext = [style contextSettings];
	var o = [gfxContext opacity];
	log("Opacity : " + o );
	
	return " alpha=\"" + o + "\" ";
}

function getRadiusAttribute(layer)
{
	log("getRadiusAttribute()...");
	var radius = [[[layer layers] firstObject] fixedRadius];
	var rd = " radiusX=\"" + radius + "\" ";
	rd += " radiusY=\"" + radius + "\" ";
	log("radius : " + radius );
	
	return rd;
}


function getStrokeNode(border)
{
	log("getStrokeNode...");
	var strokeChain = T.tab() + "<s:stroke>\n";
	var borderType = [border fillType];

	if( borderType == 0 ){
		var borderColor = [border color];
		var hexColor = [borderColor hexValue];
		log('hexValue : ' + hexColor);

		T.add();
		strokeChain += T.tab() + "<s:SolidColorStroke color=\"#" + hexColor + "\" ";
		var colorAlpha = [borderColor alpha];
		log('alpha : ' + colorAlpha );
		strokeChain += " alpha=\""+ colorAlpha +"\" ";
		strokeChain += "/>\n";
		T.rm();
		strokeChain += T.tab() + "</s:stroke>\n";
	}

	return strokeChain;
}


function getFillNode(fill)
{
	log("getFillNode...");

	var fillChain = T.tab() + "<s:fill>\n";
	var fillType = [fill fillType];

	if( fillType == 0 )
	{
		var fillColor = [fill color];
		var hexColor = [fillColor hexValue];
		log('hexValue : ' + hexColor);

		T.add();
		fillChain += T.tab() + "<s:SolidColor color=\"#" + hexColor + "\" ";
		var colorAlpha = [fillColor alpha];
		log('colorAlpha : ' + colorAlpha);
		fillChain += " alpha=\""+ colorAlpha +"\" ";
		fillChain += "/>\n";
		T.rm();
		fillChain += T.tab() + "</s:fill>\n";
	}

	return fillChain;
}

/*
* EXPORT LES ITEMS DE LA SELECTION
*/
for (var i=0; i<selection.length(); i++) {
	var layer = selection[i];

	var res = getMXML(layer)

	clipboard.copy( res );
	log(res);

}