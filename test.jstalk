// tests (ctrl alt cmd t)

const ND = " >\n";
const _ND = " />\n";

log('notif start');

var shadow = selection.firstObject().style().shadows().firstObject();
var color = shadow.color();
log("shadow » color" + color.hexValue() + " / alpha : " + color.alpha() + " / " + shadow.blurRadius() + " / " + shadow.offsetX()+ " / " + shadow.offsetY() );


function getFilters( style )
{
	log("getFilters()...")

	var f = "<s:filters>\n";

	// shadows
	f += getShadowBytype(style, true);
	// innerShadows
	f += getShadowBytype(style, false);

	f += "</s:filters>\n";

	return f;
}

function getShadowBytype( style , inner){
	log("getShadowBytype()...");

	var shadows = inner ? style.innerShadows() : style.shadows();
	var shadow = shadows[0];
	var s = "";

	if( shadow ){
		s += getShadow(shadow, inner);
	}
	return s;
}


/*
<s:filters>
	<s:DropShadowFilter blurY="2" blurX="2" color="#000000" alpha="0.5" strength="1" />
</s:filters>
*/
function getShadow( shadow , inner)
{
	var s = "<s:DropShadowFilter ";

	s += inner ? "inner=\"true\" " : "";

	s +=  "blurX=\"" + shadow.blurRadius() + "\" ";
	s +=  "blurY=\"" + shadow.blurRadius() + "\" ";

	var distance = 0;
	s +=  "distance=\"" + distance + "\" ";

	s +=  "color=\"#" + shadow.color().hexValue() + "\" ";

	s +=  "alpha=\"" + shadow.color().alpha() + "\" ";

	s +=  "strength=\"" + shadow.spread() + "\" ";

	// ANGLE » s +=  "distance=\"" + getShadowDistance + "\" ";
	// ANGLE » s +=  "angle=\"" + getShadowAngle + "\" ";

	s += _ND;

	return s;
}


var filters = getFilters( selection.firstObject().style() );

log("filters : \n" + filters );

//var shadow = selection.firstObject().style().

log('notif end');
/*
translation tests
function getSelectionOriginRect(){
	var rect = {};

	rect.x = 10;

	var numItems = [selection length];
	log(numItems);

	var layer;
	var minX, minY;
	var maxX, maxY;
	var itemX, itemY;
	var itemW, itemH;

	// determine x y min
	for( var i = 0 ; i < numItems ; i ++){
		layer = selection[i];
		itemX = [[layer frame] x];
		itemY = [[layer frame] y];
		itemW = [[layer frame] width];
		itemH = [[layer frame] height];
		if( i == 0){
			minX = itemX;
			minY = itemY;
			maxX = itemX + itemW;
			maxY = itemY + itemH;
		} else {
			minX = Math.min(itemX , minX);
			minY = Math.min(itemY , minY);
			maxX = Math.max(itemX + itemW , maxX);
			maxY = Math.max( itemY + itemH , maxY );
		}
	}

	rect.x = minX;
	rect.y = minY;
	rect.width = maxX - minX;
	rect.height = maxY - minY;

	return rect;
}

function getItemRect( item , setLocalPosition, originRect)
{
	var rect = {};
	rect.width = [item width];
	rect.height = [item height];

	var itemX = [item x];
	var itemY = [item y];
	rect.x = setLocalPosition ? itemX - originRect.x : itemX;
	rect.y = setLocalPosition ? itemY - originRect.y : itemY;
	return rect;
}

var r = getSelectionOriginRect();

log(r.x + ' , ' + r.y + ' , ' + r.width + ' , ' + r.height);

var layer1 = selection[0];
var item1 = [layer1 frame];
var translated1 = getItemRect(  item1, true, r );
log("translated1 : " + translated1.x + ',' + translated1.y);

var layer2 = selection[1];
var item2 = [layer2 frame];
var translated2 = getItemRect( item2, true, r );
log("translated2 : " + translated2.x + ',' + translated2.y);


*/
/*
gradient studies
var gradient = selection.firstObject().style().fills().firstObject().gradient();

log(gradient.from() + ' / ' + gradient.to());
*/
/*
var Al = {
	show:function( bt1Label,  title, info ){
		var alert = [[NSAlert alloc] init];
		[alert addButtonWithTitle:bt1Label];
		[alert setMessageText:title];
		[alert setInformativeText:info];
		[alert setAlertStyle:NSCriticalAlertStyle];		

		var choice = [alert runModal];
		[alert release];
		return choice == NSInformationalAlertStyle;
	}
};

Al.show('OK', "Export MXML", "Completed");
*/
/*
UserNotification test » not working
//[[NSUserNotificationCenter defaultUserNotificationCenter] setDelegate:this];
//register to listen for event    
// [[NSNotificationCenter defaultCenter]
//   addObserver:self
//   name:@"eventType"
//   object:nil ];


function userNotificationCenter_center_shouldPresentNotification(center, notification){
	return true;
}
/*
- (BOOL)userNotificationCenter:(NSUserNotificationCenter *)center
     shouldPresentNotification:(NSUserNotification *)notification
{
    return YES;
}
*/



/*
var notification = [[NSUserNotification alloc] init];
notification.title = @"ouaich";
notification.informativeText = @"A notification";

[[NSUserNotificationCenter defaultUserNotificationCenter] deliverNotification:notification];
[notification release]
*/

//event handler when event occurs


//[[NSNotificationCenter defaultCenter] postNotificationName:@"coucou" object:self];



/*
// Gradients study
var gradient = selection.firstObject().style().fills().firstObject().gradient();

var direction = {
	from:[gradient from],
	to:[gradient to]
};

log("gradient : direction : " + direction.from + ' » ' + direction.to );

var gradientsSteps = [gradient stops];
var numSteps = gradientsSteps.length();
log( "gradient : num Steps : " + numSteps );

var gradient;
for( var i = 0 ; i < numSteps ; i++)
{
	gradient = gradientsSteps[i];
	log("gStep ratio : " + [gradient position]);
	log("gStep color : " + [[gradient color] hexValue]);
}
*/

/* 
//NATIVE ALERT
var alert = [[NSAlert alloc] init];
[alert addButtonWithTitle:@"OK"];
[alert addButtonWithTitle:@"Cancel"];
[alert setMessageText:@"Delete the record?"];
[alert setInformativeText:@"Deleted records cannot be restored."];
[alert setAlertStyle:NSWarningAlertStyle];

if ([alert runModal] == NSAlertFirstButtonReturn) {
    // OK clicked, delete the record
    log('YES');
}
[alert release];
log("*** alert complete ***");
*/

/*
// USER INPUT
var times = [[doc askForUserInput:"How many times?" initialValue:10] integerValue];
log("input : " + times);
*/

/*
// CLIPBOARD TEST
var clipboard = {
	board: NSPasteboard.generalPasteboard(),

	copy:function( value )
	{
		this.board.declareTypes_owner( [ NSPasteboardTypeString ], null );
		this.board.setString_forType( value , NSPasteboardTypeString );	
	}
}
clipboard.copy("azer");

*/

/*
// GET COLOR HEX VALUE
var color = selection.firstObject().style().fills().firstObject().color();
var hex = [color hexValue];
log(hex);
/*
